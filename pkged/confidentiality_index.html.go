package pkged

const confidentiality_index_DOT_html string = "<style type="text/css" nonce="{{csp-nonce}}">
    /**
     * Why not just configure all colors ;)
     */
    :root {
        --twxCnfColorSignBackground: #404040;
        --twxCnfColorInternal: #E55B5B;
        --twxCnfColorRestricted: #E5BA79;
        --twxCnfColorConfidential: #6FE56B;
        --twxCnfColorTextBackgroundInactive: #a7a7a7;
        --twxCnfColorTextActive: #FFFFFF;
        --twxCnfColorTextInactive: #858585;
    }

    /**
     * I'm the container, heya
     */
    #twx_cnf_container {
        position: fixed;
        display: flex;
        left: 20px;
        bottom: 20px;
        min-width: 28px;
        height: 80px;
        cursor: help;
        z-index: 99999;
        font-family: Verdana, Geneva, Tahoma, sans-serif;
        text-decoration: none;
    }

    /**
     * Stuff for the sign itself
     */
    #twx_cnf_sign {
        width: 28px;
        height: 80px;
        border-radius: 4px;
        background-color: var(--twxCnfColorSignBackground);
        display: flex;
        flex-direction: column;
        box-sizing: border-box;
        padding: 6px 0;
        justify-content: space-between;
        align-items: center;
    }

    .twx_cnf_c {
        left: 4px;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background-color: var(--twxCnfColorTextBackgroundInactive);
    }

    #twx_cnf_int {
        top: 5px;
    }

    #twx_cnf_int.active {
        background-color: var(--twxCnfColorInternal);
    }

    #twx_cnf_rest {
        top: 30px;
    }

    #twx_cnf_rest.active {
        background-color: var(--twxCnfColorRestricted);
    }

    #twx_cnf_conf {
        top: 55px;
    }

    #twx_cnf_conf.active {
        background-color: var(--twxCnfColorConfidential);
    }

    /**
     * Stuff for the text
     */
    #twx_cnf_txt {
        position: relative;
        float: right;
        height: 80px;
    }

    .twx_cnf_t {
        overflow: hidden;
        position: absolute;
        left: 0;
        width: 0;
        height: 20px;
        border-radius: 0 4px 4px 0;
        background-color: var(--twxCnfColorTextBackgroundInactive);
        -webkit-transition: width 0.2s ease-in-out;
        -moz-transition: width 0.2s ease-in-out;
        -o-transition: width 0.2s ease-in-out;
        transition: width 0.2s ease-in-out;
    }

    #twx_cnf_container:hover .twx_cnf_t {
        width: 100px;
    }

    .twx_cnf_t p {
        margin: 1px 0;
        padding: 0;
        font-size:13px;
        color: var(--twxCnfColorTextInactive);
        text-align: center;
    }

    .twx_cnf_t.active p {
        color: var(--twxCnfColorTextActive);
    }

    #twx_cnf_t_int {
        top: 5px;
    }

    #twx_cnf_t_int.active {
        background-color: var(--twxCnfColorInternal);
    }

    #twx_cnf_t_rest {
        top: 30px;
    }

    #twx_cnf_t_rest.active {
        background-color: var(--twxCnfColorRestricted);
    }

    #twx_cnf_t_conf {
        top: 55px;
    }

    #twx_cnf_t_conf.active {
        background-color: var(--twxCnfColorConfidential);
    }

    #twx_cnf_mobile_txt {
        display: none;
    }

    @media screen and (max-width: 720px) {
        .twx_cnf_c:not(.active) {
            display: none;
            top: unset;
            bottom: 0;
        }

        #twx_cnf_sign {
            background-color: transparent;
            height: 24px;
            justify-content: center;
            align-items: center;
            padding: 0;
        }

        #twx_cnf_txt {
            display: none;
        }

        #twx_cnf_container:hover .twx_cnf_t {
            display: none;
            width: 0;
        }

        #twx_cnf_container {
            display: flex;
            flex-direction: column;
            left: 16px;
            bottom: 16px;
            height: auto;
            justify-content: center;
            align-items: center;
        }

        #twx_cnf_mobile_txt {
            display: block;
            margin-top: 4px;
            width: fit-content;
            font-size: 12px;
            background-color: rgba(10, 10, 10, 0.62);
            border-radius: 3px;
            padding: 4px;
            text-decoration: none;
            color: white;
        }

        a:hover #twx_cnf_mobile_txt, a:active #twx_cnf_mobile_txt, a:visited #twx_cnf_mobile_txt {
            text-decoration: none;
        }
    }
</style>
<script type="text/javascript" nonce="{{csp-nonce}}">
    // "int", "rest" or "conf" are possible values
    let twxCnfActive = "{{confidentiality}}";
    let twcCnfPossValues = {
        "int": "Internal",
        "rest": "Restricted",
        "conf": "Confidential"
    };

    // Create all necessary elements
    let twxCnfContainer = document.createElement("a");
        twxCnfContainer.id = "twx_cnf_container";
        twxCnfContainer.href = "https://wiki.toowoxx.de/display/ISMS/Informationsklassifizierung";
        twxCnfContainer.target = "_blank";
        twxCnfContainer.onclick = function() {
    };
    document.body.appendChild(twxCnfContainer);

    // Sign
    let twxCnfSign = document.createElement("div");
    twxCnfSign.id = "twx_cnf_sign";
    twxCnfContainer.appendChild(twxCnfSign);

    for(let twxCnfPossValueKey in twcCnfPossValues) {
        let twxCnfColorSign = document.createElement("div");
        twxCnfColorSign.id = "twx_cnf_" + twxCnfPossValueKey;
        twxCnfColorSign.classList.add("twx_cnf_c");
        if (twxCnfActive === twxCnfPossValueKey) {
            twxCnfColorSign.classList.add("active");
        }
        twxCnfSign.appendChild(twxCnfColorSign);
    };

    // Texts
    let twxCnfTxt = document.createElement("div");
    twxCnfTxt.id = "twx_cnf_txt";
    twxCnfContainer.appendChild(twxCnfTxt);

    for(let twxCnfPossValueKey in twcCnfPossValues) {
        let twxCnfT = document.createElement("div");
        twxCnfT.id = "twx_cnf_t_" + twxCnfPossValueKey;
        twxCnfT.classList.add("twx_cnf_t");
        if (twxCnfActive === twxCnfPossValueKey) {
            twxCnfT.classList.add("active");
        }
        twxCnfTxt.appendChild(twxCnfT);

        let twxCnfTP = document.createElement("p");
        twxCnfTP.innerHTML = twcCnfPossValues[twxCnfPossValueKey];
        twxCnfT.appendChild(twxCnfTP);
    };

    // Mobile view text
    let twxCnfMobileTxt = document.createElement("div");
    twxCnfMobileTxt.id = "twx_cnf_mobile_txt";
    twxCnfMobileTxt.innerText = twcCnfPossValues[twxCnfActive];
    twxCnfContainer.appendChild(twxCnfMobileTxt);
</script>
"

